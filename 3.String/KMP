//Best pattern searching algorithm for strings
//T.C=O(N+M)
//T.C=O(M)
void KMPSearch(string& pat,string& txt)
{
    int m= pat.length();
    int n = txt.length();
 
    int lps[m];
    computeLPSArray(pat,lps);
 
    int i = 0;
    int j = 0;
    while ((n - i) >= (m - j)) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }
        if (j == m) {
            printf("Found pattern at index %d ", i - j);
            j = lps[j - 1];
        }
        else if (i <n && pat[j] != txt[i]) {
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}
 
void computeLPSArray(string& pat,int lps[])
{
    int len = 0;
    int m=pat.length();
 
    lps[0] = 0;
 
    int i = 1;
    while (i < m) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        }
        else
        {
            if (len != 0) {
                len = lps[len - 1];
            }
            else 
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}
 
